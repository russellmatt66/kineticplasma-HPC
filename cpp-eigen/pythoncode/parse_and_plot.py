"""
Python script for parsing the CSV datafiles generated by main.cpp and plotting the output

Spaghetti.

"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import helper

x_max = np.pi
x_min = -np.pi

# all_color_names = list(mcolors.XKCD_COLORS.keys()) # for generating the colors to plot the particles
# ^^^^^^^^^^^^^^^ Deprecated - this task done with a pyplot cmap 'tab10', in the particle parsing function. 

# DataFrames
particles_df_N2v0 = pd.read_csv('particles_phasespaceN2v0.csv')
particles_df_N2v1 = pd.read_csv('particles_phasespaceN2v1.csv')
particles_df_N64 = pd.read_csv('particles_phasespaceN64.csv')
particles_df_N64_dt10x = pd.read_csv('particles_phasespaceN64_dt10x.csv')
particles_df_N64_dt20x = pd.read_csv('particles_phasespaceN64_dt20x.csv')
particles_df_N64_dt50x = pd.read_csv('particles_phasespaceN64_dt50x.csv')

grid_df_N2v0 = pd.read_csv('grid_dataN2v0.csv')
grid_df_N2v1 = pd.read_csv('grid_dataN2v1.csv')
grid_df_N64 = pd.read_csv('grid_dataN64.csv')
grid_df_N64_dt10x = pd.read_csv('grid_dataN64_dt10x.csv')
grid_df_N64_dt20x = pd.read_csv('grid_dataN64_dt20x.csv')
grid_df_N64_dt50x = pd.read_csv('grid_dataN64_dt50x.csv')

energy_df_N2v0 = pd.read_csv('energy_historyN2v0.csv')
energy_df_N2v1 = pd.read_csv('energy_historyN2v1.csv')
energy_df_N64 = pd.read_csv('energy_historyN64.csv')
energy_df_N64_dt10x = pd.read_csv('energy_historyN64_dt10x.csv')
energy_df_N64_dt20x = pd.read_csv('energy_historyN64_dt20x.csv')
energy_df_N64_dt50x = pd.read_csv('energy_historyN64_dt50x.csv')

""" 
Part (1) 
N = 2, v_{i}(0) = 0 
"""
# Need a wrapper for this chunk
""" Phasespace plotting"""
# figN2v0, axN2v0 = plt.subplots() 
# list_particles_df_N2v0, N_N2v0, particlecolors_N2v0, Nt_N2v0 = helper.parseParticles(particles_df_N2v0)
# routineFlag = helper.plotPhaseSpace(list_particles_df_N2v0, N_N2v0, particlecolors_N2v0, axN2v0)
# figN2v0.suptitle('Phase-space trajectories for $N = 2$, $v^{\prime} = 0$')
# plt.xlim(x_min,x_max)
# plt.legend()

# Need a wrapper for this chunk
""" Energy History Plotting """
# Efig_N2v0, Eax_N2v0 = plt.subplots()
# energy_df_N2v0.plot(kind='scatter', x = 't' , y = 'Kinetic Energy', ax=Eax_N2v0, color='blue', label = 'Kinetic Energy')
# energy_df_N2v0.plot(kind='scatter', x = 't', y = 'Electric Energy', ax=Eax_N2v0, color='red', label = 'Electric Energy')
# energy_df_N2v0.plot(kind='scatter', x = 't', y = 'Total Energy', ax=Eax_N2v0, color='green', label = 'Total Energy')
# Efig_N2v0.suptitle('Energy history for $N = 2$, $v^\prime = 0$')
# plt.legend()

""" 
Part (2)
N = 2, v_{i}(0) = vprime
"""
""" Phasespace Plotting """
figN2v1, axN2v1 = plt.subplots()
list_particles_df_N2v1, N_N2v1, particlecolors_N2v1, Nt_N2v1 = helper.parseParticles(particles_df_N2v1)
routineFlag = helper.plotPhaseSpace(list_particles_df_N2v1, N_N2v1, particlecolors_N2v1, axN2v1)
vprime = particles_df_N2v1.loc[particles_df_N2v1['t']==0, 'velocity'].iloc[0]
figN2v1.suptitle(r'Phase-space trajectories for $N = 2$, $x^{} = (-\pi/2,\pi/2)$, $v^\prime = {}$'.format(0,vprime), fontsize=28)
plt.xlim(x_min,x_max)


""" Energy History Plotting """
Efig_N2v1, Eax_N2v1 = plt.subplots()
energy_df_N2v1.plot(kind='scatter', x = 't' , y = 'Kinetic Energy', ax=Eax_N2v1, color='blue', label = 'Kinetic Energy')
energy_df_N2v1.plot(kind='scatter', x = 't', y = 'Electric Energy', ax=Eax_N2v1, color='red', label = 'Electric Energy')
energy_df_N2v1.plot(kind='scatter', x = 't', y = 'Total Energy', ax=Eax_N2v1, color='green', label = 'Total Energy')
Efig_N2v1.suptitle('Energy history for $N = 2$, $v^\prime = {}$'.format(vprime), fontsize=28)
plt.legend()

"""
Part (3)
N = 64, v_i(x_i) = v' * sin(k * x_i)
"""
""" Phasespace Plotting """
figN64, axN64 = plt.subplots()
list_particles_df_N64, N_N64, particlecolors_N64, Nt_N64 = helper.parseParticles(particles_df_N64)
routineFlag = helper.plotPhaseSpace(list_particles_df_N64, N_N64, particlecolors_N64, axN64)
vprime_N64 = particles_df_N64.loc[particles_df_N64['t']==0, 'velocity'].max()
dt_N64 = energy_df_N64['dt'].iloc[0]
plt.xlim(x_min,x_max)
figN64.suptitle('Phase-space trajectories for $N=64$, $\omega = \sqrt{N / 2 \pi}$, $v^\prime = %4.3f$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64, Nt_N64, dt_N64), fontsize=28)

figN64_dt10x, axN64_dt10x = plt.subplots()
list_particles_df_N64_dt10x, N_N64, particlecolors_N64, Nt_N64 = helper.parseParticles(particles_df_N64_dt10x)
routineFlag = helper.plotPhaseSpace(list_particles_df_N64_dt10x, N_N64, particlecolors_N64, axN64_dt10x)
vprime_N64_dt10x = particles_df_N64_dt10x.loc[particles_df_N64_dt10x['t']==0, 'velocity'].max()
dt10x_N64 = energy_df_N64_dt10x['dt'].iloc[0]
figN64_dt10x.suptitle('Phase-space trajectories for $N=64$, $\omega = \sqrt{N / 2 \pi}$, $v^\prime = %4.3f$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64_dt10x, Nt_N64, dt10x_N64))


figN64_dt20x, axN64_dt20x = plt.subplots()
list_particles_df_N64_dt20x, N_N64, particlecolors_N64, Nt_N64 = helper.parseParticles(particles_df_N64_dt20x)
routineFlag = helper.plotPhaseSpace(list_particles_df_N64_dt20x, N_N64, particlecolors_N64, axN64_dt20x)
vprime_N64_dt20x = particles_df_N64_dt20x.loc[particles_df_N64_dt20x['t']==0, 'velocity'].max()
dt20x_N64 = energy_df_N64_dt20x['dt'].iloc[0]
figN64_dt20x.suptitle('Phase-space trajectories for $N=64$, $\omega = \sqrt{N / 2 \pi}$, $v^\prime = %4.3f$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64_dt20x, Nt_N64, dt20x_N64))


figN64_dt50x, axN64_dt50x = plt.subplots()
list_particles_df_N64_dt50x, N_N64, particlecolors_N64, Nt_N64 = helper.parseParticles(particles_df_N64_dt50x)
routineFlag = helper.plotPhaseSpace(list_particles_df_N64_dt50x, N_N64, particlecolors_N64, axN64_dt50x)
vprime_N64_dt50x = particles_df_N64_dt50x.loc[particles_df_N64_dt50x['t']==0, 'velocity'].max()
dt50x_N64 = energy_df_N64_dt50x['dt'].iloc[0]
figN64_dt50x.suptitle('Phase-space trajectories for $N=64$, $\omega = \sqrt{N / 2 \pi}$, $v^\prime = %4.3f$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64_dt50x, Nt_N64, dt50x_N64))


""" Energy History Plotting """
Efig_N64, Eax_N64 = plt.subplots()
energy_df_N64.plot(kind='scatter', x = 't' , y = 'Kinetic Energy', ax=Eax_N64, color='blue', label = 'Kinetic Energy')
energy_df_N64.plot(kind='scatter', x = 't', y = 'Electric Energy', ax=Eax_N64, color='red', label = 'Electric Energy')
energy_df_N64.plot(kind='scatter', x = 't', y = 'Total Energy', ax=Eax_N64, color='green', label = 'Total Energy')
Efig_N64.suptitle('Energy History for $N=64$, $v^\prime = %4.3f$, $\omega = \sqrt{N / 2\pi}$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64, Nt_N64, dt_N64),fontsize=28)
plt.legend()

Efig_N64_dt10x, Eax_N64_dt10x = plt.subplots()
energy_df_N64_dt10x.plot(kind='scatter', x = 't' , y = 'Kinetic Energy', ax=Eax_N64_dt10x, color='blue', label = 'Kinetic Energy')
energy_df_N64_dt10x.plot(kind='scatter', x = 't', y = 'Electric Energy', ax=Eax_N64_dt10x, color='red', label = 'Electric Energy')
energy_df_N64_dt10x.plot(kind='scatter', x = 't', y = 'Total Energy', ax=Eax_N64_dt10x, color='green', label = 'Total Energy')
Efig_N64_dt10x.suptitle('Energy History for $N=64$, $v^\prime = %4.3f$, $\omega = \sqrt{N / 2\pi}$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64_dt10x, Nt_N64, dt10x_N64))
plt.legend()

Efig_N64_dt20x, Eax_N64_dt20x = plt.subplots()
energy_df_N64_dt20x.plot(kind='scatter', x = 't' , y = 'Kinetic Energy', ax=Eax_N64_dt20x, color='blue', label = 'Kinetic Energy')
energy_df_N64_dt20x.plot(kind='scatter', x = 't', y = 'Electric Energy', ax=Eax_N64_dt20x, color='red', label = 'Electric Energy')
energy_df_N64_dt20x.plot(kind='scatter', x = 't', y = 'Total Energy', ax=Eax_N64_dt20x, color='green', label = 'Total Energy')
Efig_N64_dt20x.suptitle('Energy History for $N=64$, $v^\prime = %4.3f$, $\omega = \sqrt{N / 2\pi}$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64_dt20x, Nt_N64, dt20x_N64))
plt.legend()

Efig_N64_dt50x, Eax_N64_dt50x = plt.subplots()
energy_df_N64_dt50x.plot(kind='scatter', x = 't' , y = 'Kinetic Energy', ax=Eax_N64_dt50x, color='blue', label = 'Kinetic Energy')
energy_df_N64_dt50x.plot(kind='scatter', x = 't', y = 'Electric Energy', ax=Eax_N64_dt50x, color='red', label = 'Electric Energy')
energy_df_N64_dt50x.plot(kind='scatter', x = 't', y = 'Total Energy', ax=Eax_N64_dt50x, color='green', label = 'Total Energy')
Efig_N64_dt50x.suptitle('Energy History for $N=64$, $v^\prime = %4.3f$, $\omega = \sqrt{N / 2\pi}$, $N_{t} = %d$, $\Delta t = %f$' % (vprime_N64_dt50x, Nt_N64, dt50x_N64))
plt.legend()

""" 
Compute plasma frequency using number of zero-crossings
"""
num_cycles = []
num_cycles.append(helper.zeroCrossings(energy_df_N64))
num_cycles.append(helper.zeroCrossings(energy_df_N64_dt10x))
num_cycles.append(helper.zeroCrossings(energy_df_N64_dt20x))
num_cycles.append(helper.zeroCrossings(energy_df_N64_dt20x))
print(num_cycles)

simtime = []
simtime.append(energy_df_N64['t'].max())
simtime.append(energy_df_N64_dt10x['t'].max())
simtime.append(energy_df_N64_dt20x['t'].max())
simtime.append(energy_df_N64_dt50x['t'].max())
print(simtime)

# Turn number of cycles for each case into angular frequency
frequency = [0] * len(num_cycles)
for ifq in range(len(num_cycles)):
    frequency[ifq] = 2.0 * np.pi * num_cycles[ifq] / simtime[ifq]
print(frequency)

frequency_theoretical = np.sqrt(N_N64 / (2.0 * np.pi))
print(frequency_theoretical)

omegadt = []
omegadt.append(frequency_theoretical * energy_df_N64['dt'].max())
omegadt.append(frequency_theoretical * energy_df_N64_dt10x['dt'].max())
omegadt.append(frequency_theoretical * energy_df_N64_dt20x['dt'].max())
omegadt.append(frequency_theoretical * energy_df_N64_dt50x['dt'].max())
print(omegadt)

plt.show()
